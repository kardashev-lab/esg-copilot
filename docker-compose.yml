services:
  backend:
    build:
      context: ./backend
      target: ${BUILD_TARGET:-production}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Core settings
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # API Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - API_KEYS=${API_KEYS:-}
      
      # Database
      - DATABASE_URL=postgresql://esg_user:${DB_PASSWORD:-esg_password_123}@postgres:5432/esg_copilot
      - CHROMA_DB_PATH=./chroma_db
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # File uploads
      - UPLOAD_DIR=./uploads
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-52428800}
      
      # Security
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-3600}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      
      # Features
      - ENABLE_CHAT=${ENABLE_CHAT:-true}
      - ENABLE_DOCUMENT_UPLOAD=${ENABLE_DOCUMENT_UPLOAD:-true}
      - ENABLE_REPORT_GENERATION=${ENABLE_REPORT_GENERATION:-true}
      - ENABLE_COMPLIANCE_CHECK=${ENABLE_COMPLIANCE_CHECK:-true}
      - ENABLE_SUPPLY_CHAIN=${ENABLE_SUPPLY_CHAIN:-true}
      
      # Backup
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - S3_BUCKET=${S3_BUCKET:-}
      - S3_REGION=${S3_REGION:-}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-}
    volumes:
      - backend_uploads:/app/uploads
      - backend_chroma:/app/chroma_db
      - backend_logs:/app/logs
      - backend_backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - esg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  frontend:
    build:
      context: ./frontend
      target: ${BUILD_TARGET:-production}
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_HTTPS_PORT:-443}:443"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - esg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: esg_copilot
      POSTGRES_USER: esg_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-esg_password_123}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - esg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U esg_user -d esg_copilot"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - esg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - esg-network
    profiles:
      - nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - esg-network
    profiles:
      - monitoring

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - esg-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_chroma:
    driver: local
  backend_logs:
    driver: local
  backend_backups:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  esg-network:
    driver: bridge
